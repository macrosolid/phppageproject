# Build Docker php page image.
# Triggered on push to main branch and pull requests to main branch.
name: Build and Deploy PHP Image

on:
  push:
    branches: [main]
    tags:        
    - v0.0.1
    - v0.0.2
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code.
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - uses: actions-ecosystem/action-bump-semver@v1
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: minor

      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.bump-semver.outputs.new_version }}
          message: '${{ steps.bump-semver.outputs.new_version }}:PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}'

      # Login to Dockerhub.
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Get smart tag
      #   id: prepare
      #   uses: Surgo/docker-smart-tag-action@v1
      #   with:
      #     docker_image: ${{ secrets.DOCKERHUB_USERNAME }}/phpwebpage

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          # default_branch: ${{ github.event.repository.default_branch }}
          cache-from: |
            type=local,src=tags.csv

      # Build and push the Docker image.
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUBIMAGE }}:latest, ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUBIMAGE }}:${{  github.ref_name  }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-output: json

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy php_service and php_deployment
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG64 }}
        with:
          args: |
            apply -f php_service.yaml
            sleep 10
            kubectl apply -f php_deployment.yaml
            sleep 10
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.7.0/deploy/static/provider/cloud/deploy.yaml
            sleep 10
            kubectl wait --namespace ingress-nginx --for=condition=ready pod  --selector=app.kubernetes.io/component=controller --timeout=120s
            sleep 10
            kubectl apply -f php_ingress.yaml
